// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"dario.cat/mergo"
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
	
)

// GetTerraformResourceType returns Terraform resource type for this AzureBot
func (mg *AzureBot) GetTerraformResourceType() string {
    return "azurerm_bot_service_azure_bot"
}

// GetConnectionDetailsMapping for this AzureBot
func (tr *AzureBot) GetConnectionDetailsMapping() map[string]string {
  return map[string]string{ "developer_app_insights_api_key": "developerAppInsightsApiKeySecretRef", "luis_key": "luisKeySecretRef",  }
}

// GetObservation of this AzureBot
func (tr *AzureBot) GetObservation() (map[string]any, error) {
    o, err := json.TFParser.Marshal(tr.Status.AtProvider)
    if err != nil {
        return nil, err
    }
    base := map[string]any{}
    return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AzureBot
func (tr *AzureBot) SetObservation(obs map[string]any) error {
    p, err := json.TFParser.Marshal(obs)
    if err != nil {
        return err
    }
    return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AzureBot
func (tr *AzureBot) GetID() string {
    if tr.Status.AtProvider.ID == nil {
        return ""
    }
    return *tr.Status.AtProvider.ID
}

// GetParameters of this AzureBot
func (tr *AzureBot) GetParameters() (map[string]any, error) {
    p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
    if err != nil {
        return nil, err
    }
    base := map[string]any{}
    return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AzureBot
func (tr *AzureBot) SetParameters(params map[string]any) error {
    p, err := json.TFParser.Marshal(params)
    if err != nil {
        return err
    }
    return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this AzureBot
func (tr *AzureBot) GetInitParameters() (map[string]any, error) {
    p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
    if err != nil {
        return nil, err
    }
    base := map[string]any{}
    return base, json.TFParser.Unmarshal(p, &base)
}

// GetInitParameters of this AzureBot
func (tr *AzureBot) GetMergedParameters(shouldMergeInitProvider bool) (map[string]any, error) {
    params, err := tr.GetParameters()
    if err != nil {
        return nil, errors.Wrapf(err, "cannot get parameters for resource '%q'", tr.GetName())
    }
    if !shouldMergeInitProvider {
        return params, nil
    }

    initParams, err := tr.GetInitParameters()
    if err != nil {
        return nil, errors.Wrapf(err, "cannot get init parameters for resource '%q'", tr.GetName())
    }

    // Note(lsviben): mergo.WithSliceDeepCopy is needed to merge the
    // slices from the initProvider to forProvider. As it also sets
    // overwrite to true, we need to set it back to false, we don't
    // want to overwrite the forProvider fields with the initProvider
    // fields.
    err = mergo.Merge(&params, initParams, mergo.WithSliceDeepCopy, func(c *mergo.Config) {
        c.Overwrite = false
    })
    if err != nil {
        return nil, errors.Wrapf(err, "cannot merge spec.initProvider and spec.forProvider parameters for resource '%q'", tr.GetName())
    }

    return params, nil
}

// LateInitialize this AzureBot using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AzureBot) LateInitialize(attrs []byte) (bool, error) {
    params := &AzureBotParameters{}
    if err := json.TFParser.Unmarshal(attrs, params); err != nil {
        return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
    }
    opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
    

    li := resource.NewGenericLateInitializer(opts...)
    return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AzureBot) GetTerraformSchemaVersion() int {
    return 0
}
